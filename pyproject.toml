[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
authors = [
    {name = "Darcy Mason and contributors", email = "darcymason@gmail.com"}
]
classifiers=[
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries"
]
dependencies = []
description = "A pure Python package for reading and writing DICOM data"
# dynamic = ["version"]
keywords = ["dicom, python, medical, imaging"]
license = {text = "MIT"}
name = "pydicom"
readme = "README.md"
requires-python = ">=3.10"
version = "3.0.0.dev0"


[project.optional-dependencies]
docs = [
    "numpy",
    "numpydoc",
    "matplotlib",
    "pillow",
    "sphinx",
    "sphinx_rtd_theme",
    "sphinx-gallery",
    "sphinxcontrib-napoleon",
    "sphinx-copybutton"
]

dev = [
    "black==23.11.0",
    "mypy==1.7.1",
    "pydicom-data",
    "pytest",
    "pytest-cov",
    "ruff==0.1.9",
    "types-requests"
]

basic = ["numpy"]

pixeldata = [
    "numpy",
    "pillow", # leave out? Better alternatives below
    "pyjpegls",
    "pylibjpeg[openjpeg]",
    "pylibjpeg[rle]",
    "python-gdcm"
]

# Consider libjpeg-turbo (BSD-like license) when 12-bit available
# https://github.com/libjpeg-turbo/libjpeg-turbo/issues/199
gpl-license = ["pylibjpeg[libjpeg]"]


[project.urls]
documentation = "https://pydicom.github.io/pydicom"
download = "https://github.com/pydicom/pydicom/archive/main.zip"
homepage = "https://github.com/pydicom/pydicom"
repository = "https://github.com/pydicom/pydicom"



[project.scripts]
pydicom = "pydicom.cli.main:main"


[project.entry-points.pydicom_subcommands]
codify = "pydicom.cli.codify:add_subparser"
show = "pydicom.cli.show:add_subparser"


[tool.black]
exclude = ".venv|build|/_.*_dict.py$"
force-exclude = ".venv|/_.*_dict.py$"  # to not do files pre-commit asks for


[tool.ruff]
src = ["src"]
line-length = 214
target-version = "py310"
include = ["src/*.py", "tests/*.py", "doc/*.py"]

[tool.ruff.lint]
select = [
    "UP",
    "C9",
    "E",
    "F",
    "PL",
    "W",
]
ignore = [
    "PLR5501",
    "PLC1901",
    "PLR2004",
    "PLW0603",
    "PLW2901",
]

[tool.ruff.lint.mccabe]
max-complexity = 36

[tool.ruff.lint.pylint]
max-args = 17
max-branches = 43
max-returns = 9
max-statements = 108

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"src/pydicom/config.py" = ["PLW0602"]
"src/pydicom/sr/_concepts_dict.py" = ["F601"]
"tests/*.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
files = "src/"
exclude = ["src/pydicom/benchmarks/", "src/pydicom/pixel_data_handlers/pillow_handler.py"]
hide_error_codes = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_return_any = true
warn_unreachable = false
ignore_missing_imports = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disable_error_code = ["method-assign", "ignore-without-code", "redundant-expr", "truthy-bool"]

[[tool.mypy.overrides]]
# 2023-06: mypy complains for a line in this file if ignore used or not.
# Override unused ignores for that one file
module = "pydicom.encoders.base"
warn_unused_ignores = false
