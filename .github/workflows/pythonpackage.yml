name: Testsuite

on: [push]

jobs:
  flake8:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version:  [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: py${{ matrix.python-version }}-${{ matrix.os }}-pip

    - name: Syntax errors check
      run: |
        python -m pip install flake8
        flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics
    - name: Style warnings
      run: |    
        # exit-zero treats all errors as warnings.
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=79 --statistics        

  build:
    needs: flake8
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        #  ** Update flake8 literals if change os or python-versions
        os: [ubuntu-latest, windows-latest] # , macos-latest]
        python-version:  [3.6, 3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        python -m pip install -U pip # to ensure version > 20 to have cache dir
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: py${{ matrix.python-version }}-${{ matrix.os }}-pip
    - name: Initial test environment setup
      run: |
        python -m pip install wheel 
        python -m pip install pytest pytest-cov
    - name: Test with no external libraries
      run: |
        pytest --cov=pydicom --cov-append
    - name: Install numpy
      run: |
        python -m pip install numpy
    - name: Test with numpy
      run: |
        pytest --cov=pydicom --cov-append
    - name: Pillow and jpeg_ls
      if: ${{ matrix.python-version == '3.8' }}
      run: |
        python -m pip install pillow cython
        python -m pip install git+https://github.com/Who8MyLunch/CharPyLS
        pytest --cov=pydicom --cov-append
    - name: Cache GDCM
      id: cache-gdcm
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: actions/cache@v2
      with:
        path: gdcmbin
        key: GDCM
    - name: Build GDCM
      if: ${{ matrix.os == 'ubuntu-latest' && steps.cache-gdcm.outputs.cache-hit != 'true' }}
      run: |
        sudo apt-get install -y --no-install-recommends build-essential swig python3-dev
        git clone --branch release https://github.com/malaterre/GDCM.git
        mkdir gdcmbin
        cd gdcmbin
        cmake -DGDCM_WRAP_PYTHON=ON -DGDCM_BUILD_SHARED_LIBS=ON  ../GDCM
        make
        cd ..

    - name: Test with GDCM on one OS/Python
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.7' }}
      run: |
        # Create super-simple setup.py for python -m pip install
        echo 'from setuptools import setup; setup(name="gdcm.py")' > gdcmbin/bin/setup.py
        python -m pip install -e gdcmbin/bin/
        python -c 'import gdcm; print(f"Using gdcm {gdcm.GDCM_VERSION}")'
        pytest --cov=pydicom --cov-append
    - name: Send coverage results
      if: ${{ success() && matrix.os == 'ubuntu-latest' }}
      run: >
        bash <(curl --connect-timeout 10 --retry 10 --retry-max-time
        0 https://codecov.io/bash) || (sleep 30 && bash <(curl
        --connect-timeout 10 --retry 10 --retry-max-time
        0 https://codecov.io/bash))
