name: unit-tests

on:
  pull_request:  # Testing only!
    brances: [ master ]
  push:
    branches:
      - master

jobs:
  test-base:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
        include:
            ext-sources: pydicom-data
            pytest-args: --cov=pydicom --cov-append
            coverage: coverage

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        python -m pip install -U pip
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: py${{ matrix.python-version }}-${{ matrix.os }}-pip
    - name: Cache pydicom test data
      id: cache-testdata
      uses: actions/cache@v2
      with:
        path: ${{ env.HOME }}/.pydicom
        key: pydicom-testdata
    - name: Initial test environment setup
      run: |
        python -m pip install -e .
        python -m pip install wheel
        python -m pip install pytest pytest-cov
    - name: Test with no external libraries
      run: |
        pytest ${{ matrix.pytest-args }}

    - name: Test external sources using pydicom-data
      if: ${{ matrix.ext-sources == 'pydicom-data' }}
      run: |
        python -m pip install git+https://github.com/pydicom/pydicom-data
        pytest ${{ matrix.pytest-args}} pydicom/tests/test_data_manager.py

    - name: Send coverage results
      if: ${{ success() && matrix.coverage == 'coverage' }}
      uses: codecov/codecov-action@v1

  test-pixel-handlers:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version:  ['3.10']
        jpeg-deps: [pillow-jpegls]
        gdcm-dep: [no-gdcm]
        include:
            pytest-args: --cov=pydicom --cov-append

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        python -m pip install -U pip
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: py${{ matrix.python-version }}-${{ matrix.os }}-pip
    - name: Cache pydicom test data
      id: cache-testdata
      uses: actions/cache@v2
      with:
        path: ${{ env.HOME }}/.pydicom
        key: pydicom-testdata
    - name: Initial test environment setup
      run: |
        python -m pip install -e .
        python -m pip install -U wheel pytest pytest-cov numpy

    - name: Test with numpy
      run: |
        pytest ${{ matrix.pytest-args }}

    - name: Install and test Pillow
      run: |
        python -m pip install pillow cython
        python -m pip install git+https://github.com/Who8MyLunch/CharPyLS
        pytest ${{ matrix.pytest-args }}

    - name: Install and test jpeg_ls
      run: |
        python -m pip install cython
        python -m pip install git+https://github.com/Who8MyLunch/CharPyLS
        pytest ${{ matrix.pytest-args }}

    - name: Install and test GDCM
      run: |
        python -m pip install python-gdcm
        python -c 'import gdcm; print(f"Using gdcm {gdcm.GDCM_VERSION}")'
        pytest ${{ matrix.pytest-args }}

    - name: Install and test pylibjpeg
      run: |
        python -m pip install pylibjpeg
        python -m pip uninstall -y pylibjpeg-openjpeg pylibjpeg-rle
        pytest ${{ matrix.pytest-args }} pydicom/tests/test_pylibjpeg.py
        python -m pip install pylibjpeg-openjpeg pylibjpeg-libjpeg pylibjpeg-rle
        pytest ${{ matrix.pytest-args }} pydicom/tests/test_pylibjpeg.py

    - name: Send coverage results
      if: ${{ success() }}
      uses: codecov/codecov-action@v1
